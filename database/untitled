# %%
import sqlite3
import pandas as pd
from sqlite3 import Error
import cupy as cp
import random

#https://likegeeks.com/es/tutorial-de-python-sqlite3/

# %%
class DataBase:
    def __init__(self,path):
        self.path = path
        self.con = self.sql_connection()

    def sql_connection(self):
        try:
            con = sqlite3.connect(self.path)
            return con
        except Error:
            print('Error')
    def sql_close(self):
        self.con.close()
        
    def sql_create_table_architecture(self):
        cursorObj = self.con.cursor()
        cursorObj.execute('DROP table if exists architectures')
        cursorObj.execute("CREATE TABLE architectures(id INTEGER PRIMARY KEY AUTOINCREMENT,name text)")
        self.con.commit() 
    def sql_create_params(self):
        cursorObj = self.con.cursor()
        cursorObj.execute('DROP table if exists params_model')
        cursorObj.execute("CREATE TABLE params_model(id integer PRIMARY KEY AUTOINCREMENT,k1 integer,k2 integer,k3 integer,k4 integer,k5 integer,k6 integer,k7 integer,k8 integer,p1 integer,p2 integer,p3 integer,p4 integer,s1 integer,s2 integer,s3 integer,s4 integer,out_in)")
        self.con.commit()   
        
    def sql_create_table_model(self):
        cursorObj = self.con.cursor()
        cursorObj.execute('DROP table if exists models')
        cursorObj.execute("CREATE TABLE models(id INTEGER PRIMARY KEY AUTOINCREMENT,id_architecture integer,id_param integer")
        self.con.commit()
    
 
    def sql_create_table_execution(self):
        cursorObj = self.con.cursor()
        cursorObj.execute('DROP table if exists executions')
        cursorObj.execute("CREATE TABLE executions(id integer PRIMARY KEY AUTOINCREMENT,id_model integer,len_device integer,time_train_execution real,time_test_execution real,avg_psnr real,std_psnr,avg_psnr_dirty real,std_psnr_dirty real,avg_psnr_diff real,std_psnr_diff real)")
        self.con.commit()
    def sql_create_table_model_execution(self):
        cursorObj = self.con.cursor()
        cursorObj.execute('DROP table if exists models_executions')
        cursorObj.execute("CREATE TABLE models_executions(id integer PRIMARY KEY AUTOINCREMENT,id_model integer,id_execution integer)")
        self.con.commit()
    def sql_create_table_losses_execution(self):
        cursorObj = self.con.cursor()
        cursorObj.execute('DROP table if exists losses_execution')
        cursorObj.execute("CREATE TABLE losses_execution(id integer PRIMARY KEY AUTOINCREMENT,id_execution integer,loss real,type integer)")
        self.con.commit()
    def sql_create_table_psnrs(self):
        cursorObj = self.con.cursor()
        cursorObj.execute('DROP table if exists psnrs')
        cursorObj.execute("CREATE TABLE psnrs(id integer PRIMARY KEY AUTOINCREMENT,id_execution integer,psnr real,type integer)")
        self.con.commit()
   
    def create_all_tables(self):
        self.sql_create_table_architecture()
        self.sql_create_table_model()
        self.sql_create_table_execution()
        self.sql_create_table_model_execution()
        self.sql_create_table_losses_execution()
        self.sql_create_table_psnrs()
    def delete_all_tablet(self):
        cursorObj = self.con.cursor()
        cursorObj.execute('DROP table if exists models')
        cursorObj.execute('DROP table if exists executions')
        cursorObj.execute('DROP table if exists models_executions')
        cursorObj.execute('DROP table if exists losses_execution')
        cursorObj.execute('DROP table if exists psnrs')
        self.con.commit()
        
    def insert_architecture(self,values):
        cursorObj = self.con.cursor()
        cursorObj.execute('INSERT OR REPLACE INTO architectures(id,id_net, size_figure,type_psf,num_epochs,learning_rate,batch_train,len_dataset) VALUES(?,?,?,?,?,?,?,?)', values)
        self.con.commit()
        
    def insert_model(self,values):
        cursorObj = self.con.cursor()
        cursorObj.execute('INSERT OR REPLACE INTO models(id,id_net, size_figure,type_psf,num_epochs,learning_rate,batch_train,len_dataset) VALUES(?,?,?,?,?,?,?,?)', values)
        self.con.commit()
        
        
    def sql_insert_executions(self,values):
            cursorObj = self.con.cursor()
            cursorObj.execute('INSERT OR REPLACE INTO executions(id,name)VALUES(?,?)', values)
            self.con.commit()
    def sql_insert_losses(self,values):
            cursorObj = self.con.cursor()
            cursorObj.execute('INSERT INTO losses_execution(id_execution,loss,type) VALUES(?,?,?)', values)
            self.con.commit()
            
    def sql_update_train_time(self,id_execution,value):
            cursorObj = self.con.cursor()
            cursorObj.execute('UPDATE executions SET time_train_execution = ? where id = ?',(value,id_execution)) 
            self.con.commit()
    def sql_insert_psnr(self,values):
            cursorObj = self.con.cursor()
            cursorObj.execute('INSERT INTO psnrs(id_execution,psnr,type) VALUES(?,?,?)', values)
            self.con.commit() 
    def sql_insert_params(self,values):
            cursorObj = self.con.cursor()
            cursorObj.execute('INSERT INTO params_model(k1,k2,k3,k4,k5,k6,k7,k8,p1,p2,p3,p4,s1,s2,s3,s4,out_in) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)', values)
            self.con.commit() 

                        
    def sql_update_test_time(self,id_execution,value):
            cursorObj = self.con.cursor()
            cursorObj.execute('UPDATE executions SET time_test_execution = ? where id = ?',(value,id_execution)) 
            self.con.commit()
    def sql_update_psnr_clean(self,id_execution,avg,std):
            cursorObj = self.con.cursor()
            cursorObj.execute('UPDATE executions SET avg_psnr = ? where id = ?',(avg,id_execution)) 
            cursorObj.execute('UPDATE executions SET std_psnr = ? where id = ?',(std,id_execution)) 
            self.con.commit()
    def sql_update_psnr_dirty(self,id_execution,avg,std):
            cursorObj = self.con.cursor()
            cursorObj.execute('UPDATE executions SET avg_psnr_dirty = ? where id = ?',(avg,id_execution)) 
            cursorObj.execute('UPDATE executions SET std_psnr_dirty = ? where id = ?',(std,id_execution)) 
            self.con.commit()
    def sql_update_psnr_diff(self,id_execution,avg,std):
            cursorObj = self.con.cursor()
            cursorObj.execute('UPDATE executions SET avg_psnr_diff = ? where id = ?',(avg,id_execution)) 
            cursorObj.execute('UPDATE executions SET std_psnr_diff = ? where id = ?',(std,id_execution)) 
            self.con.commit()
  
        
    def sql_fetch_condition(self,con):
        cursorObj = self.con.cursor()
  
    def db_reset(self):
        self.delete_all_tablet()
        self.create_all_tables()


    def db_loss(self,db_model):
        self.sql_insert_model(values)

    def db_valid(self,db_model):
        self.sql_insert_model(values)
        
    def db_new_executions(self,values):
        self.sql_insert_executions(values)

    def db_train_loss(self,id_execution,losses):
        for loss in losses:
            self.sql_insert_losses((id_execution,loss,0))
    def db_validate_loss(self,id_execution,losses):
        for loss in losses:
            self.sql_insert_losses((id_execution,loss,1))

    def db_train_time(self,id_execution,value):
            self.sql_update_train_time(id_execution,value)

    def db_psnr_dirty(self,id_execution,psnrs):
        avg_psnr = cp.asnumpy(cp.average(psnrs)).item()
        std_psnr = cp.asnumpy(cp.std(cp.array(psnrs))).item()
        self.sql_update_psnr_dirty(id_execution,avg_psnr,std_psnr)
        for psnr in psnrs:
            self.sql_insert_psnr((id_execution,psnr,0))

    def db_psnr_output(self,id_execution,psnrs):
        avg_psnr = cp.asnumpy(cp.average(psnrs)).item()
        std_psnr = cp.asnumpy(cp.std(cp.array(psnrs))).item()

        self.sql_update_psnr_clean(id_execution,avg_psnr,std_psnr)

        for psnr in psnrs:
            self.sql_insert_psnr((id_execution,psnr,1))

    def db_psnr_diff(self,id_execution,psnrs):
        avg_psnr = cp.asnumpy(cp.average(psnrs)).item()
        std_psnr = cp.asnumpy(cp.std(cp.array(psnrs))).item()
        self.sql_update_psnr_diff(id_execution,avg_psnr,std_psnr)
        for psnr in psnrs:
            self.sql_insert_psnr((id_execution,psnr,2))


    def db_test_time(self,id_execution,value):
        self.sql_update_test_time(id_execution,value)
    
   
       
  
    def get_params_random(self):
        cursorObj = self.con.cursor()
        values =  self.random_params()  
        cursorObj.execute('SELECT * FROM params_model WHERE k1 = ? AND k2 = ? AND k3 = ? AND k4 = ? AND k5 = ? AND k6 = ? AND k7 = ? AND k8 = ? AND p1 = ? AND p2 = ? AND p3 = ? AND p4 = ? AND s1 = ? AND s2 = ? AND s3 = ? AND s4 = ? AND out_in = ? ',values) 
        rows = cursorObj.fetchall()
        if (len(rows) == 0):
            self.sql_insert_params(values)
            cursorObj.execute('SELECT * FROM params_model WHERE k1 = ? AND k2 = ? AND k3 = ? AND k4 = ? AND k5 = ? AND k6 = ? AND k7 = ? AND k8 = ? AND p1 = ? AND p2 = ? AND p3 = ? AND p4 = ? AND s1 = ? AND s2 = ? AND s3 = ? AND s4 = ? AND out_in = ? ',values) 
            return cursorObj.fetchall()[0]
        else: 
            return self.get_params_random()
        
        
    def random_params (self):
        randoms  = cp.arange(1,6,1)
        k1 = random.choice(randoms)
        k2 = random.choice(randoms)
        k3 = random.choice(randoms)
        k4 = random.choice(randoms)
        k5 = random.choice(randoms)
        k6 = random.choice(randoms) 
        k7 = random.choice(randoms)
        k8 = random.choice(randoms)
        s1 = random.choice(randoms)
        s2 = random.choice(randoms)
        s3 = random.choice(randoms)
        s4 = random.choice(randoms)
        p1 = random.choice(randoms)
        p2 = random.choice(randoms)
        p3 = random.choice(randoms)
        p4 = random.choice(randoms)
        out_in = 32
        values = (int(k1),int(k2),int(k3),int(k4),int(k5),int(k6),int(k7),int(k8),int(p1),int(p2),int(p3),int(p4),int(s1),int(s2),int(s3),int(s4),int(out_in))
        return values





'''


